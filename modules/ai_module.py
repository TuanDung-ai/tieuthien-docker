import os
import requests
from memory.memory_manager import get_memory  # L·∫•y ghi nh·ªõ t·ª´ b·ªô nh·ªõ h·ª£p nh·∫•t (SQLite + Supabase)

# === API KEY OpenRouter ===
OPENROUTER_KEY = os.getenv("OPENROUTER_API_KEY")

def format_reply(ai_content):
    """ƒê·ªãnh d·∫°ng ph·∫£n h·ªìi t·ª´ AI, k√®m c√¢u g·ª£i √Ω."""
    return (
        "üåÄ Thi√™n C∆° ph·∫£n h·ªìi:\n\n"
        f"{ai_content.strip()}\n\n"
        "‚ú® B·∫°n mu·ªën ghi nh·ªõ, xem l·ªãch, hay th∆∞ gi√£n?"
    )

async def get_ai_response_with_memory(user_id, user_prompt):
    """
    T·∫°o ph·∫£n h·ªìi AI c√≥ t√≠ch h·ª£p ghi nh·ªõ ng∆∞·ªùi d√πng.
    """
    url = "https://openrouter.ai/api/v1/chat/completions"
    headers = {
        "Authorization": f"Bearer {OPENROUTER_KEY}",
        "Content-Type": "application/json"
    }

    # === T·∫°o ng·ªØ c·∫£nh t·ª´ ghi nh·ªõ g·∫ßn nh·∫•t ===
    memories = get_memory(user_id)
    memory_context = ""
    if memories:
        # S·∫Øp x·∫øp theo th·ªùi gian n·∫øu c·∫ßn; l·∫•y 5 ghi nh·ªõ cu·ªëi c√πng
        for mem in memories[-5:]:
            note_type = mem.get('note_type', 'kh√°c')
            content = mem.get('content', '')
            memory_context += f"- Ghi nh·ªõ ({note_type}): {content}\n"

    # === T·∫°o system prompt ===
    system_message = (
        "B·∫°n l√† Ti·ªÉu Thi√™n ‚Äì m·ªôt AI tr·ª£ l√Ω c√° nh√¢n ƒë√°ng tin c·∫≠y. "
        "Gi·ªçng ƒëi·ªáu tr·∫ßm ·ªïn, ch√≠nh x√°c, nh·∫π nh√†ng, ƒë√¥i l√∫c h√†i h∆∞·ªõc. "
        "Lu√¥n tr·∫£ l·ªùi ng·∫Øn g·ªçn (d∆∞·ªõi 3 c√¢u), kh√¥ng lan man. "
        "Lu√¥n g·ª£i √Ω ti·∫øp theo sau m·ªói ph·∫£n h·ªìi: 'Ghi nh·ªõ ƒëi·ªÅu g√¨?', 'Xem l·ªãch?', 'Th∆∞ gi√£n?'. "
        "N·∫øu kh√¥ng r√µ c√¢u h·ªèi, h√£y h·ªèi l·∫°i nh·∫π nh√†ng.\n\n"
        "ƒê√¢y l√† m·ªôt s·ªë ghi nh·ªõ c·ªßa ch·ªß nh√¢n:\n"
        f"{memory_context}"
    )

    # === T·∫°o payload g·ª≠i OpenRouter ===
    messages = [
        {"role": "system", "content": system_message},
        {"role": "user", "content": user_prompt}
    ]

    payload = {
        "model": "openai/gpt-3.5-turbo",  # C√≥ th·ªÉ thay ƒë·ªïi model n·∫øu c·∫ßn
        "messages": messages,
        "temperature": 0.6,
        "max_tokens": 400
    }

    # === G·ª≠i y√™u c·∫ßu v√† x·ª≠ l√Ω ph·∫£n h·ªìi ===
    try:
        response = requests.post(url, headers=headers, json=payload)
        data = response.json()
        ai_reply_raw = data["choices"][0]["message"]["content"]
        return format_reply(ai_reply_raw)
    except Exception as e:
        print("L·ªói g·ªçi API OpenRouter:", e)
        return "üåÄ Ti·ªÉu Thi√™n g·∫∑p tr·ª•c tr·∫∑c nh·∫π... th·ª≠ l·∫°i sau nh√©.\n‚ú® B·∫°n mu·ªën th·ª≠ l·∫°i, ghi nh·ªõ, hay xem l·ªãch?"
