import os
import json
import requests
from datetime import datetime
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ApplicationBuilder, CommandHandler, MessageHandler, CallbackQueryHandler, ContextTypes, filters

# === L·∫§Y TOKEN ===
TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
OPENROUTER_KEY = os.getenv("OPENROUTER_API_KEY")

# === FILE L∆ØU TR√ç NH·ªö ===
MEMORY_FILE = "memory.json"

# === TR·∫†NG TH√ÅI NG∆Ø·ªúI D√ôNG ===
user_states = {}  # key: user_id, value: "waiting_note" / "waiting_delete" / None

# === H√ÄM GHI NH·ªö ===
def save_memory(user_id, content):
    data = {}
    if os.path.exists(MEMORY_FILE):
        with open(MEMORY_FILE, "r") as f:
            data = json.load(f)

    user_key = str(user_id)
    if user_key not in data:
        data[user_key] = []

    memory_item = {
        "content": content,
        "time": datetime.now().isoformat()
    }

    data[user_key].append(memory_item)

    with open(MEMORY_FILE, "w") as f:
        json.dump(data, f, indent=2)

def get_memory(user_id):
    if not os.path.exists(MEMORY_FILE):
        return []
    with open(MEMORY_FILE, "r") as f:
        data = json.load(f)
    return data.get(str(user_id), [])

def clear_memory(user_id):
    if not os.path.exists(MEMORY_FILE):
        return False

    with open(MEMORY_FILE, "r") as f:
        data = json.load(f)

    user_key = str(user_id)
    if user_key in data:
        del data[user_key]
        with open(MEMORY_FILE, "w") as f:
            json.dump(data, f, indent=2)
        return True
    return False

def delete_memory_item(user_id, index):
    if not os.path.exists(MEMORY_FILE):
        return False

    with open(MEMORY_FILE, "r") as f:
        data = json.load(f)

    user_key = str(user_id)
    if user_key in data and 0 <= index < len(data[user_key]):
        del data[user_key][index]
        if not data[user_key]:
            del data[user_key]  # X√≥a user n·∫øu kh√¥ng c√≤n nh·ªõ g√¨
        with open(MEMORY_FILE, "w") as f:
            json.dump(data, f, indent=2)
        return True
    return False

# === PH·∫¢N H·ªíI AI ===
def get_ai_response(user_prompt):
    url = "https://openrouter.ai/api/v1/chat/completions"
    headers = {
        "Authorization": f"Bearer {OPENROUTER_KEY}",
        "Content-Type": "application/json"
    }

    messages = [
        {
            "role": "system",
            "content": (
                "B·∫°n l√† Thi√™n C∆° ‚Äì m·ªôt AI tr·ª£ l√Ω c√° nh√¢n ƒë√°ng tin c·∫≠y. "
                "Gi·ªçng ƒëi·ªáu tr·∫ßm ·ªïn, ch√≠nh x√°c, nh·∫π nh√†ng, th·ªânh tho·∫£ng c√≥ ch√∫t h√†i h∆∞·ªõc nh·∫π. "
                "Lu√¥n tr·∫£ l·ªùi ng·∫Øn g·ªçn, kh√¥ng qu√° 3 c√¢u. Cu·ªëi m·ªói ph·∫£n h·ªìi, ƒë∆∞a ra g·ª£i √Ω ti·∫øp theo ph√π h·ª£p. "
                "V√≠ d·ª•: 'B·∫°n c·∫ßn ghi nh·ªõ ƒëi·ªÅu g√¨?', 'Thi√™n C∆° c√≥ th·ªÉ nh·∫Øc l·ªãch, t√¢m s·ª± ho·∫∑c k·ªÉ chuy·ªán...'. "
                "N·∫øu kh√¥ng r√µ c√¢u h·ªèi, h√£y h·ªèi l·∫°i nh·∫π nh√†ng. Kh√¥ng tr·∫£ l·ªùi qu√° d√†i hay lan man."
            )
        },
        {
            "role": "user",
            "content": user_prompt
        }
    ]

    payload = {
        "model": "openai/gpt-3.5-turbo",
        "messages": messages,
        "temperature": 0.6,
        "max_tokens": 400
    }

    try:
        response = requests.post(url, headers=headers, json=payload)
        data = response.json()
        return data["choices"][0]["message"]["content"]
    except Exception as e:
        print("L·ªói AI:", e)
        return "Thi√™n C∆° g·∫∑p tr·ª•c tr·∫∑c nh·∫π... th·ª≠ l·∫°i sau nh√©."

# === GIAO DI·ªÜN N√öT ===
def get_main_keyboard():
    return InlineKeyboardMarkup([
        [
            InlineKeyboardButton("üìù Ghi nh·ªõ", callback_data='note'),
            InlineKeyboardButton("üìÖ L·ªãch", callback_data='calendar'),
            InlineKeyboardButton("üéß Th∆∞ gi√£n", callback_data='relax')
        ],
        [
            InlineKeyboardButton("üìñ Xem nh·ªõ", callback_data='view'),
            InlineKeyboardButton("üóëÔ∏è X√≥a h·∫øt", callback_data='clear_all')
        ]
    ])

# === L·ªÜNH /start ===
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    prompt = "Ch√†o ng∆∞·ªùi d√πng, b·∫°n mu·ªën Thi√™n C∆° gi√∫p g√¨ h√¥m nay?"
    ai_reply = get_ai_response(prompt)
    await update.message.reply_text(ai_reply, reply_markup=get_main_keyboard())

# === L·ªÜNH /help ===
async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    msg = (
        "üåÄ Thi√™n C∆° l·∫Øng nghe...\n\n"
        "L·ªánh kh·∫£ d·ª•ng:\n"
        "/start ‚Äì B·∫Øt ƒë·∫ßu tr√≤ chuy·ªán\n"
        "/help ‚Äì Danh s√°ch l·ªánh\n"
        "/xem_ghi_nho ‚Äì Xem l·∫°i k√Ω ·ª©c\n"
        "/xoa_ghi_nho_all ‚Äì X√≥a to√†n b·ªô ghi nh·ªõ\n"
        "(Ho·∫∑c chat b·∫•t k·ª≥ ƒë·ªÉ tr√≤ chuy·ªán c√πng Thi√™n C∆°)"
    )
    await update.message.reply_text(msg)

# === /xem_ghi_nho ===
async def xem_ghi_nho(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.message.from_user.id
    memories = get_memory(user_id)

    if not memories:
        await update.message.reply_text("üì≠ B·∫°n ch∆∞a ghi nh·ªõ g√¨ c·∫£.")
    else:
        msg = "üìñ Ghi nh·ªõ c·ªßa b·∫°n:\n\n"
        for idx, item in enumerate(memories, start=1):
            content = item["content"]
            time_str = item["time"].split("T")[0]
            msg += f"{idx}. {content} ({time_str})\n"
        msg += "\nG√µ s·ªë ghi nh·ªõ c·∫ßn x√≥a ho·∫∑c /xoa_ghi_nho_all ƒë·ªÉ x√≥a h·∫øt."
        user_states[user_id] = "waiting_delete"
        await update.message.reply_text(msg)

# === /xoa_ghi_nho_all ===
async def xoa_ghi_nho_all(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.message.from_user.id
    success = clear_memory(user_id)
    user_states[user_id] = None

    if success:
        await update.message.reply_text("üóëÔ∏è Thi√™n C∆° ƒë√£ x√≥a to√†n b·ªô ghi nh·ªõ c·ªßa b·∫°n.")
    else:
        await update.message.reply_text("üì≠ Kh√¥ng c√≥ g√¨ ƒë·ªÉ x√≥a c·∫£.")

# === NH·∫¨N TIN NH·∫ÆN T·ª∞ DO ===
async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.message.from_user.id
    user_text = update.message.text.strip()
    state = user_states.get(user_id)

    if state == "waiting_note":
        save_memory(user_id, user_text)
        user_states[user_id] = None
        await update.message.reply_text("üìå Thi√™n C∆° ƒë√£ ghi nh·ªõ ƒëi·ªÅu b·∫°n v·ª´a n√≥i.")
    elif state == "waiting_delete":
        if user_text.isdigit():
            index = int(user_text) - 1
            success = delete_memory_item(user_id, index)
            if success:
                await update.message.reply_text(f"üóëÔ∏è ƒê√£ x√≥a ghi nh·ªõ s·ªë {user_text}.")
            else:
                await update.message.reply_text("‚ùó S·ªë kh√¥ng h·ª£p l·ªá. Th·ª≠ l·∫°i.")
            user_states[user_id] = None
        else:
            await update.message.reply_text("‚ùó Vui l√≤ng g√µ s·ªë ƒë·ªÉ x√≥a ho·∫∑c /xoa_ghi_nho_all.")
    else:
        ai_reply = get_ai_response(user_text)
        await update.message.reply_text(ai_reply, reply_markup=get_main_keyboard())

# === X·ª¨ L√ù N√öT ===
async def button_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    user_id = query.from_user.id
    choice = query.data

    if choice == 'note':
        await query.edit_message_text("üìù B·∫°n mu·ªën ghi nh·ªõ ƒëi·ªÅu g√¨? G√µ n·ªôi dung v√†o nh√©.")
        user_states[user_id] = "waiting_note"
    elif choice == 'calendar':
        await query.edit_message_text("üìÖ Ch·ª©c nƒÉng l·ªãch ch∆∞a m·ªü, ƒëang c·∫≠p nh·∫≠t.")
    elif choice == 'relax':
        await query.edit_message_text("üéß H√≠t th·ªü s√¢u... Thi√™n C∆° s·∫Ω k·ªÉ chuy·ªán ho·∫∑c ph√°t nh·∫°c nh·∫π nh√†ng.")
    elif choice == 'view':
        context.args = []
        await xem_ghi_nho(update, context)
    elif choice == 'clear_all':
        context.args = []
        await xoa_ghi_nho_all(update, context)

# === CH·∫†Y BOT ===
if __name__ == '__main__':
    app = ApplicationBuilder().token(TOKEN).build()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("help", help_command))
    app.add_handler(CommandHandler("xem_ghi_nho", xem_ghi_nho))
    app.add_handler(CommandHandler("xoa_ghi_nho_all", xoa_ghi_nho_all))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    app.add_handler(CallbackQueryHandler(button_callback))
    print("ü§ñ Bot Thi√™n C∆° ƒëang ho·∫°t ƒë·ªông...")
    app.run_polling()
