import os
import json
import requests
from datetime import datetime
from flask import Flask
import threading
import logging

from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ApplicationBuilder, CommandHandler, MessageHandler, CallbackQueryHandler, ContextTypes, filters

# === C·∫§U H√åNH LOG ===
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# === TOKEN v√† API KEY ===
TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
OPENROUTER_KEY = os.getenv("OPENROUTER_API_KEY")
ZEABUR_MEMORY_API = os.getenv("ZEABUR_MEMORY_API")

# === FILE L∆ØU NH·ªö ===
MEMORY_FILE = "memory.json"
user_states = {}  # user_id ‚Üí tr·∫°ng th√°i ho·∫∑c dict khi t√¨m ki·∫øm

# === H√ÄM X·ª¨ L√ù FILE GHI NH·ªö ===
def load_memory():
    if not os.path.exists(MEMORY_FILE):
        return {}
    try:
        with open(MEMORY_FILE, "r") as f:
            return json.load(f)
    except Exception as e:
        logger.error("L·ªói ƒë·ªçc file ghi nh·ªõ:", exc_info=True)
        return {}

def save_memory_to_file(data):
    try:
        with open(MEMORY_FILE, "w") as f:
            json.dump(data, f, indent=2)
    except Exception as e:
        logger.error("L·ªói ghi file ghi nh·ªõ:", exc_info=True)

# === GHI NH·ªö L√äN GOOGLE SHEETS ===
def save_memory(user_id, content, note_type="kh√°c"):
    data = load_memory()
    user_key = str(user_id)
    if user_key not in data:
        data[user_key] = []

    memory_item = {
        "content": content,
        "type": note_type,
        "time": datetime.now().isoformat()
    }

    data[user_key].append(memory_item)
    save_memory_to_file(data)

    # Ghi th√™m v√†o Google Sheets
    if ZEABUR_MEMORY_API:
        try:
            payload = {
                "chu_de": note_type,
                "noi_dung": content,
                "ghi_chu": f"From Telegram user {user_id}"
            }
            res = requests.post(f"{ZEABUR_MEMORY_API}/ghi_nho", json=payload, timeout=10)
            res.raise_for_status()
            logger.info("Ghi nh·ªõ cloud th√†nh c√¥ng: %s", res.status_code)
        except Exception as e:
            logger.error("L·ªói ghi nh·ªõ cloud:", exc_info=True)

# === L·∫§Y GHI NH·ªö ===
def get_memory(user_id, note_type=None):
    data = load_memory()
    all_notes = data.get(str(user_id), [])
    if note_type:
        return [note for note in all_notes if note["type"] == note_type]
    return all_notes

# === T√åM KI·∫æM GHI NH·ªö ===
def search_memory(user_id, keyword):
    notes = get_memory(user_id)
    result = []
    keyword_lower = keyword.lower()
    for idx, note in enumerate(notes):
        if (keyword_lower in note["content"].lower()) or (keyword_lower in note["type"].lower()):
            result.append((idx, note))
    return result

# === X√ìA GHI NH·ªö ===
def clear_memory(user_id):
    data = load_memory()
    user_key = str(user_id)
    if user_key in data:
        del data[user_key]
        save_memory_to_file(data)
        return True
    return False

def delete_memory_item(user_id, index):
    data = load_memory()
    user_key = str(user_id)
    if user_key in data and 0 <= index < len(data[user_key]):
        del data[user_key][index]
        if not data[user_key]:
            del data[user_key]
        save_memory_to_file(data)
        return True
    return False

# === C·∫¨P NH·∫¨T PH√ÇN LO·∫†I ===
def update_latest_memory_type(user_id, note_type):
    data = load_memory()
    user_key = str(user_id)
    if user_key in data and data[user_key]:
        data[user_key][-1]["type"] = note_type
        save_memory_to_file(data)
        return True
    return False

# === TRA C·ª®U GHI NH·ªö G·∫¶N NH·∫§T ===
def get_recent_memories_for_prompt(user_id, limit=3):
    notes = get_memory(user_id)
    notes.sort(key=lambda x: x["time"], reverse=True)
    recent = notes[:limit]
    return "\n".join(f"- ({n['type']}) {n['content']}" for n in recent)

# === H√ÄM ƒê·ªäNH D·∫†NG PH·∫¢N H·ªíI AI ===
def format_ai_response(text):
    lines = text.strip().split('\n')
    short_text = " ".join(line.strip() for line in lines if line.strip())
    if len(short_text) > 500:
        short_text = short_text[:497] + "..."
    footer = "\n\nüí° B·∫°n c·∫ßn g√¨ ti·∫øp theo? V√≠ d·ª•: 'üìù Ghi nh·ªõ', 'üìÖ L·ªãch', 'üéß Th∆∞ gi√£n'."
    return f"ü§ñ Thi√™n C∆°:\n\n{short_text}{footer}"

# === PH·∫¢N H·ªíI AI ===
def get_ai_response(user_prompt, user_id=None):
    url = "https://openrouter.ai/api/v1/chat/completions"
    headers = {
        "Authorization": f"Bearer {OPENROUTER_KEY}",
        "Content-Type": "application/json"
    }

    memory_context = ""
    if user_id:
        mems = get_recent_memories_for_prompt(user_id)
        if mems:
            memory_context = f"Ng∆∞·ªùi d√πng tr∆∞·ªõc ƒë√≥ ƒë√£ ghi nh·ªõ:\n{mems}\n\n"

    messages = [
        {"role": "system", "content": "B·∫°n l√† Thi√™n C∆° ‚Äì AI tr·ª£ l√Ω c√° nh√¢n ƒë√°ng tin c·∫≠y. Lu√¥n tr·∫£ l·ªùi tr·∫ßm ·ªïn, ch√≠nh x√°c, t·ªëi ƒëa 3 c√¢u, c√≥ th·ªÉ s·ª≠ d·ª•ng d·ªØ ki·ªán c≈©."},
        {"role": "user", "content": memory_context + user_prompt}
    ]

    payload = {
        "model": "openai/gpt-3.5-turbo",
        "messages": messages,
        "temperature": 0.6,
        "max_tokens": 400
    }

    try:
        response = requests.post(url, headers=headers, json=payload)
        response.raise_for_status()
        data = response.json()
        raw_text = data["choices"][0]["message"]["content"]
        return format_ai_response(raw_text)
    except Exception as e:
        logger.error("L·ªói AI:", exc_info=True)
        return "‚ö†Ô∏è Thi√™n C∆° g·∫∑p tr·ª•c tr·∫∑c nh·∫π... th·ª≠ l·∫°i sau nh√©."

# === GIAO DI·ªÜN N√öT ===
# (Gi·ªØ nguy√™n...)

# === HANDLER L·ªÜNH ===
# (Gi·ªØ nguy√™n...)

# === FLASK SERVER ===
web_app = Flask(__name__)

@web_app.route('/')
@web_app.route('/health')
def health_check():
    return "‚úÖ Ti·ªÉu Thi√™n ƒëang v·∫≠n h√†nh b√¨nh th∆∞·ªùng."

async def run_web_app():
    web_app.run(host="0.0.0.0", port=8080)

# === KH·ªûI CH·∫†Y BOT ===
if __name__ == '__main__':
    threading.Thread(target=web_app.run, kwargs={"host": "0.0.0.0", "port": 8080}).start()
    app = ApplicationBuilder().token(TOKEN).build()
    # Th√™m handler...
    logger.info("ü§ñ Bot Thi√™n C∆° ƒë√£ h·ªìi sinh v√† v·∫≠n h√†nh...")
    app.run_polling()
